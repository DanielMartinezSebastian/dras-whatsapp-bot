const { logInfo, logError } = require("../../utils/logger");

/**
 * Handler especializado para comandos administrativos
 * Maneja comandos de alto privilegio y sistema
 */
class AdminHandler {
  constructor(botProcessor) {
    this.botProcessor = botProcessor;
    this.whatsappClient = botProcessor.whatsappClient;
    this.permissionService = botProcessor.permissionService;

    // Comandos administrativos disponibles
    this.adminCommands = {
      "/admin": "Panel de administraci√≥n",
      "/sudo": "Ejecutar comando con privilegios",
      "/debug": "Activar/desactivar modo debug",
      "/log": "Ver logs del sistema",
      "/restart": "Reiniciar bot (solo superadmin)",
      "/shutdown": "Apagar bot (solo superadmin)",
      "/reset": "Resetear sistema (solo superadmin)",
      "/config": "Configuraci√≥n del sistema",
    };

    // Estad√≠sticas
    this.stats = {
      totalAdminCommands: 0,
      deniedCommands: 0,
      successfulCommands: 0,
      failedCommands: 0,
      adminUsers: new Set(),
    };
  }

  /**
   * Maneja un comando administrativo
   * @param {Object} message - Mensaje de WhatsApp
   * @param {Object} classification - Clasificaci√≥n del mensaje
   */
  async handle(message, classification) {
    try {
      this.stats.totalAdminCommands++;

      const command = classification.command;
      const args = (message.text || "").split(" ").slice(1);

      logInfo(`Comando administrativo solicitado: ${command}`, {
        senderPhone: message.senderPhone,
        args: args,
      });

      // Verificar permisos administrativos
      const hasAdminPermission = await this.verifyAdminPermissions(
        message,
        command
      );
      if (!hasAdminPermission) {
        this.stats.deniedCommands++;
        await this.handlePermissionDenied(message, command);
        return;
      }

      // Registrar usuario admin
      this.stats.adminUsers.add(message.senderPhone);

      // Ejecutar comando administrativo
      await this.executeAdminCommand(message, command, args);

      this.stats.successfulCommands++;
    } catch (error) {
      this.stats.failedCommands++;
      logError(
        `Error ejecutando comando administrativo ${classification.command}:`,
        error
      );
      await this.handleAdminCommandError(
        message,
        classification.command,
        error
      );
    }
  }

  /**
   * Verifica permisos administrativos
   * @param {Object} message - Mensaje de WhatsApp
   * @param {string} command - Comando a verificar
   * @returns {boolean} True si tiene permisos
   */
  async verifyAdminPermissions(message, command) {
    try {
      const senderPhone = message.senderPhone;
      const chatJid = message.chatJid;
      logInfo(
        `üîç DEBUG AdminHandler: Verificando permisos para ${senderPhone}, comando: ${command}, JID: ${chatJid}`
      );

      // Verificar si botProcessor existe
      if (!this.botProcessor) {
        logError("‚ùå DEBUG AdminHandler: botProcessor no est√° disponible");
        return false;
      }

      // Verificar si userService existe y tiene el m√©todo
      if (
        !this.botProcessor.userService ||
        typeof this.botProcessor.userService.getUserByJid !== "function"
      ) {
        logError(
          "‚ùå DEBUG AdminHandler: userService no est√° disponible o no tiene getUserByJid"
        );
        return false;
      }

      // Obtener el usuario de la base de datos usando el JID
      logInfo(
        `üîç DEBUG AdminHandler: Obteniendo usuario de la base de datos usando JID: ${chatJid}`
      );
      const user = await this.botProcessor.userService.getUserByJid(chatJid);
      if (!user) {
        logInfo(
          `‚ùå DEBUG AdminHandler: Usuario no encontrado para JID: ${chatJid}`
        );
        return false;
      }

      logInfo(`‚úÖ DEBUG AdminHandler: Usuario encontrado:`, {
        phone: user.phone_number,
        type: user.user_type,
        displayName: user.display_name,
        jid: user.whatsapp_jid,
      });

      // Verificar si permissionService existe
      if (!this.permissionService) {
        logError("‚ùå DEBUG AdminHandler: permissionService no est√° disponible");
        return false;
      }

      // Usar checkPermissions del PermissionService
      logInfo(`üîç DEBUG AdminHandler: Llamando checkPermissions...`);
      const permissionCheck = await this.permissionService.checkPermissions(
        user,
        command
      );

      logInfo(
        `‚úÖ DEBUG AdminHandler: Verificaci√≥n de permisos para ${command}:`,
        {
          senderPhone,
          userType: user.user_type,
          allowed: permissionCheck.allowed,
          reason: permissionCheck.reason || "N/A",
          message: permissionCheck.message || "N/A",
        }
      );

      return permissionCheck.allowed;
    } catch (error) {
      logError(
        "‚ùå DEBUG AdminHandler: Error verificando permisos administrativos:",
        error
      );
      logError("‚ùå DEBUG AdminHandler: Stack trace:", error.stack);
      return false;
    }
  }

  /**
   * Ejecuta un comando administrativo
   * @param {Object} message - Mensaje de WhatsApp
   * @param {string} command - Comando a ejecutar
   * @param {Array} args - Argumentos del comando
   */
  async executeAdminCommand(message, command, args) {
    switch (command) {
      case "/admin":
        await this.handleAdminPanel(message);
        break;

      case "/sudo":
        await this.handleSudoCommand(message, args);
        break;

      case "/debug":
        await this.handleDebugMode(message, args);
        break;

      case "/log":
        await this.handleLogCommand(message, args);
        break;

      case "/restart":
        await this.handleRestartCommand(message);
        break;

      case "/shutdown":
        await this.handleShutdownCommand(message);
        break;

      case "/reset":
        await this.handleResetCommand(message, args);
        break;

      case "/config":
        await this.handleConfigCommand(message, args);
        break;

      default:
        await this.handleUnknownAdminCommand(message, command);
    }
  }

  /**
   * Maneja el panel de administraci√≥n
   * @param {Object} message - Mensaje de WhatsApp
   */
  async handleAdminPanel(message) {
    const stats = this.botProcessor.getStats();
    const systemStats = this.getSystemStats();

    const response = `üîß *Panel de Administraci√≥n*

üìä *Estad√≠sticas del Bot:*
‚Ä¢ Tiempo activo: ${this.formatUptime(stats.uptime)}
‚Ä¢ Mensajes procesados: ${stats.processedMessages}
‚Ä¢ Estado servicios: ${stats.userServiceReady ? "‚úÖ" : "‚ùå"}

üìà *Estad√≠sticas del Sistema:*
‚Ä¢ Comandos admin ejecutados: ${this.stats.totalAdminCommands}
‚Ä¢ Comandos denegados: ${this.stats.deniedCommands}
‚Ä¢ Tasa de √©xito: ${this.getSuccessRate()}%
‚Ä¢ Usuarios admin activos: ${this.stats.adminUsers.size}

üõ† *Comandos Disponibles:*
${Object.entries(this.adminCommands)
  .map(([cmd, desc]) => `‚Ä¢ ${cmd} - ${desc}`)
  .join("\n")}

‚ö†Ô∏è *Comandos de Sistema (SuperAdmin):*
‚Ä¢ /restart - Reiniciar bot
‚Ä¢ /shutdown - Apagar bot  
‚Ä¢ /reset - Resetear sistema`;

    await this.whatsappClient.sendMessage(
      message.senderPhone,
      this.botProcessor.botPrefix + response
    );
  }

  /**
   * Maneja comando sudo
   * @param {Object} message - Mensaje de WhatsApp
   * @param {Array} args - Argumentos del comando
   */
  async handleSudoCommand(message, args) {
    if (args.length === 0) {
      const response =
        "‚ö†Ô∏è Uso: /sudo <comando>\n\nEjecuta un comando con privilegios administrativos.";
      await this.whatsappClient.sendMessage(
        message.senderPhone,
        this.botProcessor.botPrefix + response
      );
      return;
    }

    const sudoCommand = args.join(" ");
    logInfo(`Ejecutando comando sudo: ${sudoCommand}`, {
      admin: message.senderPhone,
    });

    const response = `üîß Ejecutando con privilegios: ${sudoCommand}

‚ö†Ô∏è Esta funcionalidad est√° en desarrollo.
Por seguridad, solo comandos espec√≠ficos est√°n permitidos.`;

    await this.whatsappClient.sendMessage(
      message.senderPhone,
      this.botProcessor.botPrefix + response
    );
  }

  /**
   * Maneja modo debug
   * @param {Object} message - Mensaje de WhatsApp
   * @param {Array} args - Argumentos del comando
   */
  async handleDebugMode(message, args) {
    const action = args[0]?.toLowerCase();

    let response;
    if (action === "on" || action === "enable") {
      process.env.DEBUG_MODE = "true";
      response =
        "üêõ Modo debug ACTIVADO\n\nSe mostrar√°n logs detallados en consola.";
    } else if (action === "off" || action === "disable") {
      process.env.DEBUG_MODE = "false";
      response = "‚úÖ Modo debug DESACTIVADO\n\nLogs vuelven al nivel normal.";
    } else {
      const isDebugOn = process.env.DEBUG_MODE === "true";
      response = `üêõ *Estado del Modo Debug:* ${
        isDebugOn ? "ACTIVADO" : "DESACTIVADO"
      }

Uso:
‚Ä¢ /debug on - Activar modo debug
‚Ä¢ /debug off - Desactivar modo debug`;
    }

    await this.whatsappClient.sendMessage(
      message.senderPhone,
      this.botProcessor.botPrefix + response
    );
  }

  /**
   * Maneja comando de logs
   * @param {Object} message - Mensaje de WhatsApp
   * @param {Array} args - Argumentos del comando
   */
  async handleLogCommand(message, args) {
    const logType = args[0]?.toLowerCase() || "recent";

    const response = `üìã *Logs del Sistema*

Tipo solicitado: ${logType}

‚ö†Ô∏è Por seguridad, los logs detallados se env√≠an solo por consola.
  
üìä *Resumen de Actividad:*
‚Ä¢ Mensajes procesados: ${this.botProcessor.getStats().processedMessages}
‚Ä¢ Comandos ejecutados: ${this.stats.totalAdminCommands}
‚Ä¢ Errores recientes: 0

Use /debug on para logs detallados en tiempo real.`;

    await this.whatsappClient.sendMessage(
      message.senderPhone,
      this.botProcessor.botPrefix + response
    );
  }

  /**
   * Maneja comando de reinicio
   * @param {Object} message - Mensaje de WhatsApp
   */
  async handleRestartCommand(message) {
    const response = `üîÑ *Reinicio del Bot Solicitado*

‚ö†Ô∏è Esta operaci√≥n reiniciar√° completamente el bot.
Los usuarios pueden experimentar una breve interrupci√≥n.

‚úÖ Confirmaci√≥n requerida del SuperAdmin: ${message.senderPhone}

‚è≥ El reinicio se completar√° en aproximadamente 10 segundos...`;

    await this.whatsappClient.sendMessage(
      message.senderPhone,
      this.botProcessor.botPrefix + response
    );

    // Log cr√≠tico
    logInfo(`üîÑ REINICIO SOLICITADO por SuperAdmin: ${message.senderPhone}`);

    // Aqu√≠ se implementar√≠a la l√≥gica real de reinicio
    // Por seguridad, se requiere implementaci√≥n adicional
  }

  /**
   * Maneja comando de apagado
   * @param {Object} message - Mensaje de WhatsApp
   */
  async handleShutdownCommand(message) {
    const response = `üõë *Apagado del Bot Solicitado*

‚ö†Ô∏è Esta operaci√≥n apagar√° completamente el bot.
Requerir√° intervenci√≥n manual para reiniciar.

‚úÖ Confirmaci√≥n requerida del SuperAdmin: ${message.senderPhone}

‚è≥ El apagado se completar√° en aproximadamente 15 segundos...`;

    await this.whatsappClient.sendMessage(
      message.senderPhone,
      this.botProcessor.botPrefix + response
    );

    // Log cr√≠tico
    logInfo(`üõë APAGADO SOLICITADO por SuperAdmin: ${message.senderPhone}`);

    // Aqu√≠ se implementar√≠a la l√≥gica real de apagado
    // Por seguridad, se requiere implementaci√≥n adicional
  }

  /**
   * Maneja comando de reset
   * @param {Object} message - Mensaje de WhatsApp
   * @param {Array} args - Argumentos del comando
   */
  async handleResetCommand(message, args) {
    const resetType = args[0]?.toLowerCase() || "all";

    const response = `üîÑ *Reset del Sistema Solicitado*

Tipo de reset: ${resetType}

‚ö†Ô∏è OPERACI√ìN DESTRUCTIVA - Esta acci√≥n no se puede deshacer.

Opciones disponibles:
‚Ä¢ stats - Resetear solo estad√≠sticas
‚Ä¢ conversations - Resetear contextos de conversaci√≥n  
‚Ä¢ all - Reset completo del sistema

‚úÖ Confirmaci√≥n requerida del SuperAdmin: ${message.senderPhone}

‚è≥ Para confirmar, env√≠e: /confirm-reset ${resetType}`;

    await this.whatsappClient.sendMessage(
      message.senderPhone,
      this.botProcessor.botPrefix + response
    );
  }

  /**
   * Maneja configuraci√≥n del sistema
   * @param {Object} message - Mensaje de WhatsApp
   * @param {Array} args - Argumentos del comando
   */
  async handleConfigCommand(message, args) {
    const configAction = args[0]?.toLowerCase();

    if (!configAction) {
      const response = `‚öôÔ∏è *Configuraci√≥n del Sistema*

Variables de entorno actuales:
‚Ä¢ BOT_NAME: ${process.env.BOT_NAME || "Assistant"}
‚Ä¢ BOT_PREFIX: "${process.env.BOT_PREFIX || "Bot "}"
‚Ä¢ AUTO_REPLY: ${process.env.AUTO_REPLY || "true"}
‚Ä¢ DEBUG_MODE: ${process.env.DEBUG_MODE || "false"}

Comandos disponibles:
‚Ä¢ /config show - Mostrar configuraci√≥n completa
‚Ä¢ /config set <variable> <valor> - Cambiar variable
‚Ä¢ /config reset - Restaurar valores por defecto`;

      await this.whatsappClient.sendMessage(
        message.senderPhone,
        this.botProcessor.botPrefix + response
      );
    } else {
      await this.handleConfigSubcommand(message, configAction, args.slice(1));
    }
  }

  /**
   * Maneja subcomandos de configuraci√≥n
   * @param {Object} message - Mensaje de WhatsApp
   * @param {string} action - Acci√≥n de configuraci√≥n
   * @param {Array} args - Argumentos adicionales
   */
  async handleConfigSubcommand(message, action, args) {
    let response = "‚öôÔ∏è Subcomando de configuraci√≥n no implementado a√∫n.";

    switch (action) {
      case "show":
        response =
          "üìã Configuraci√≥n completa disponible en logs por seguridad.";
        break;
      case "set":
        response = "‚úèÔ∏è Modificaci√≥n de configuraci√≥n en desarrollo.";
        break;
      case "reset":
        response = "üîÑ Reset de configuraci√≥n en desarrollo.";
        break;
    }

    await this.whatsappClient.sendMessage(
      message.senderPhone,
      this.botProcessor.botPrefix + response
    );
  }

  /**
   * Maneja comando administrativo desconocido
   * @param {Object} message - Mensaje de WhatsApp
   * @param {string} command - Comando desconocido
   */
  async handleUnknownAdminCommand(message, command) {
    const response = `‚ùå Comando administrativo desconocido: ${command}

Usa /admin para ver el panel de administraci√≥n.`;

    await this.whatsappClient.sendMessage(
      message.senderPhone,
      this.botProcessor.botPrefix + response
    );
  }

  /**
   * Maneja permisos denegados para comandos admin
   * @param {Object} message - Mensaje de WhatsApp
   * @param {string} command - Comando denegado
   */
  async handlePermissionDenied(message, command) {
    const response = `üö´ *Acceso Denegado*

Comando: ${command}
Usuario: ${message.senderPhone}

Este comando requiere privilegios administrativos.
Contacta un SuperAdmin si necesitas acceso.`;

    await this.whatsappClient.sendMessage(
      message.senderPhone,
      this.botProcessor.botPrefix + response
    );

    // Log de seguridad
    logInfo(
      `üö´ Acceso denegado a comando admin: ${command} por ${message.senderPhone}`
    );
  }

  /**
   * Maneja errores en comandos administrativos
   * @param {Object} message - Mensaje de WhatsApp
   * @param {string} command - Comando que fall√≥
   * @param {Error} error - Error ocurrido
   */
  async handleAdminCommandError(message, command, error) {
    const response = `‚ùå Error en comando administrativo: ${command}

El error ha sido registrado para revisi√≥n.
Contacta soporte t√©cnico si el problema persiste.`;

    await this.whatsappClient.sendMessage(
      message.senderPhone,
      this.botProcessor.botPrefix + response
    );

    // Log de error cr√≠tico
    logError(
      `‚ùå Error cr√≠tico en comando admin ${command} por ${message.senderPhone}:`,
      error
    );
  }

  /**
   * Formatea tiempo de actividad
   * @param {number} uptime - Tiempo en milisegundos
   * @returns {string} Tiempo formateado
   */
  formatUptime(uptime) {
    const seconds = Math.floor(uptime / 1000);
    const minutes = Math.floor(seconds / 60);
    const hours = Math.floor(minutes / 60);
    const days = Math.floor(hours / 24);

    if (days > 0) return `${days}d ${hours % 24}h ${minutes % 60}m`;
    if (hours > 0) return `${hours}h ${minutes % 60}m`;
    if (minutes > 0) return `${minutes}m ${seconds % 60}s`;
    return `${seconds}s`;
  }

  /**
   * Obtiene tasa de √©xito
   * @returns {number} Tasa de √©xito en porcentaje
   */
  getSuccessRate() {
    if (this.stats.totalAdminCommands === 0) return 100;
    return Math.round(
      (this.stats.successfulCommands / this.stats.totalAdminCommands) * 100
    );
  }

  /**
   * Obtiene estad√≠sticas del sistema
   * @returns {Object} Estad√≠sticas del sistema
   */
  getSystemStats() {
    return {
      memoryUsage: process.memoryUsage(),
      uptime: process.uptime(),
      nodeVersion: process.version,
      platform: process.platform,
    };
  }

  /**
   * Obtiene estad√≠sticas del handler
   * @returns {Object} Estad√≠sticas
   */
  getStats() {
    return {
      ...this.stats,
      adminUsers: Array.from(this.stats.adminUsers),
      successRate: this.getSuccessRate() + "%",
    };
  }
}

module.exports = AdminHandler;
